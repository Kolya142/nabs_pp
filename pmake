#!/bin/python
import os
import sys

def safe_system(cmd: str) -> None:
    code = os.system(cmd)
    if code != 0:
        print(f"Error: command exists with {code}.\n{cmd}")
        sys.exit(1)

if len(sys.argv) != 2:
    print("Usage: make.py <build,test,install,build-all>")
    exit(1)
if sys.argv[1] == "build":
    safe_system("go build src/*")
if sys.argv[1] == "build-all":
    if not os.path.exists("build"):
        os.mkdir("build")
    oses = {
        "windows": ["amd64", "386"],
        "darwin": ["amd64"],
        "linux": ["amd64", "arm", "386"]
    }
    extentions = {
        "windows": ".exe",
        "darwin": ".mac",
        "linux": ".elf"
    }
    for OS in oses:
        for ARCH in oses[OS]:
            safe_system(f"GOOS={OS} GOARCH={ARCH} go build src/main.go src/compiler.go")
            if OS == "windows":
                os.rename("main.exe", f"build/jpp_{OS}-{ARCH}{extentions[OS]}")
            else:
                os.rename("main", f"build/jpp_{OS}-{ARCH}{extentions[OS]}")
if sys.argv[1] == "test":
    safe_system("python3 test.py")

if sys.argv[1] == "install":
    plat = 0 if sys.platform.startswith("linux") else (1 if sys.platform.startswith("win") else (2 if sys.platform.startswith("darwin") else -1))
    if plat in (0, 2):
        install_path = "/usr/local/bin/jpp" if sys.platform.startswith("darwin") else "/usr/bin/jpp"
        install_path_lapo = "/usr/local/bin/lapo" if sys.platform.startswith("darwin") else "/usr/bin/lapo"

        safe_system("go build src/*")

        if not os.path.exists(install_path):
            safe_system(f"sudo cp compiler {install_path}")
            safe_system(f"sudo chown -c {os.getuid()} {install_path}")
        else:
            safe_system(f"sudo cp compiler {install_path}")

        if not os.path.exists(install_path):
            safe_system(f"sudo cp lapo/lapo.py {install_path_lapo}")
            safe_system(f"sudo chown -c {os.getuid()} {install_path_lapo}")
        else:
            safe_system(f"sudo cp lapo/lapo.py {install_path_lapo}")
        print(f"jpp installed to {install_path}")
        print(f"lapo installed to {install_path_lapo}")
    elif plat == 1:
        import ctypes
        def is_admin():
            try:
                return ctypes.windll.shell32.IsUserAnAdmin()
            except:
                return False
        if not is_admin():
            p = sys.argv[0]
            script = os.path.abspath(p)
            params = f'{script} {sys.argv[1]}'
            ctypes.windll.shell32.ShellExecuteW(None, "runas", sys.executable, params, None, 1)
            sys.exit()
        install_path = "C:/jpp/jpp.exe"
        if not os.path.exists("C:/jpp"):
            os.makedirs("C:/jpp")

        safe_system("go build src/*")
    
        safe_system(f"copy lapo/lapo.py C:/jpp/lapo.py")
        safe_system(f"copy compiler.exe {install_path}")
        print(f"jpp installed to {install_path}")
    else:
        print("Unsupported platform")

if sys.argv[1] == "all":
    safe_system("./pmake build-all")
    safe_system("./pmake build")
    safe_system("./pmake install")

if sys.argv[1] == "pub":
    safe_system("./pmake build-all")
    safe_system("./pmake build")
    safe_system("./pmake install")
    safe_system("git add tests")
    safe_system("git add -u")
    push = input("push(Y/*)?")
    if push.upper()[0] == 'Y':
        commit = input("commit name:")
        safe_system(f"git commit -m \"{commit}\"")
        safe_system(f"git push origin main")